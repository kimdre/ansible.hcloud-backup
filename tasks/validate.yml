---
# Validate variable inputs
- name: Validate backup type
  delegate_to: "{{ delegation }}"
  assert:
    quiet: yes
    that:
      - backup_type == "snapshot" or backup_type == "backup"
    fail_msg: "Backup type must be either 'snapshot' or 'backup'."

- name: Validate api_token
  delegate_to: "{{ delegation }}"
  assert:
    quiet: yes
    that:
      - api_token is defined
      - api_token is string
      - api_token != ""
    fail_msg: "Variable api_token must be a string and not empty."

- name: Validate number of snapshots to keep
  delegate_to: "{{ delegation }}"
  when: backup_type == "snapshot" and rotate_snapshots == true
  assert:
    quiet: yes
    that:
      - keep_snapshots is integer
      - keep_snapshots >= 1
      - keep_snapshots <= 40
    fail_msg: "Number of snapshots to keep must be between 1 and 40."

- name: Validate retries and delay
  delegate_to: "{{ delegation }}"
  assert:
    quiet: yes
    that:
      - backup_check_retries is integer
      - backup_check_retries >= 0
      - backup_check_delay is integer
      - backup_check_delay >= 0
    fail_msg: "Retries and delay must be positive integers."

- name: Validate backup labels
  delegate_to: "{{ delegation }}"
  loop: "{{ backup_labels | dict2items }}"
  assert:
    quiet: yes
    that:
      - item.key is string
      - item.value is string
      - item.key != ""
      - item.key is match("^[a-zA-Z0-9_\-\.]+$")
      - item.value is match("^[a-zA-Z0-9_\-\.]+$") or item.value == ""
      - item.key | length < 64
      - item.value | length < 64
    fail_msg: "Label not in correct format."

- name: Validate label selectors
  delegate_to: "{{ delegation }}"
  when: backup_type == "snapshot"
  loop: "{{ label_selector | dict2items }}"
  assert:
    quiet: yes
    that:
      - item.key is string
      - item.value is string
      - item.key != ""
      - item.key is match("^[a-zA-Z0-9_\-\.]+$")
      - item.value is match("^[a-zA-Z0-9_\-\.]+$")
      - item.key | length < 64
      - item.value | length < 64
    fail_msg: "Label selector not in correct format."

- name: Validate if labels in label_selector are also in backup_labels
  delegate_to: "{{ delegation }}"
  when: backup_type == "snapshot"
  loop: "{{ label_selector | dict2items }}"
  assert:
    quiet: yes
    that:
      - item.key in backup_labels.keys()
      - item.value == backup_labels[item.key]
    fail_msg: "Could not find label_selector in backup_labels."

- name: Check if backups are enabled on server
  when: backup_type == "backup"
  block:
    - name: Get server details
      delegate_to: "{{ delegation }}"
      register: server
      hetzner.hcloud.server_info:
        api_token: "{{ api_token }}"
        name: "{{ inventory_hostname }}"

    - name: Check if backups are enabled
      delegate_to: "{{ delegation }}"
      assert:
        quiet: yes
        that:
          - server.hcloud_server_info[0].backup_window not in [None, ""]
        fail_msg: "Backups are not enabled on this server."
